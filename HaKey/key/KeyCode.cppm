module;

#include "shared/Platform.h"

#if LINUX
#include <asm-generic/int-ll64.h>
#endif
#if WINDOWS
#include <Windows.h>
#endif

export module KeyCode;


namespace HaKey
{
	export enum KeyCode 
#if LINUX
	: __u16  
#endif
#if WINDOWS
		: DWORD
#endif
	{
		NONE = PLATFORM_VALUE(0, 0),
		ESC = PLATFORM_VALUE(1, VK_ESCAPE),
		N_1 = PLATFORM_VALUE(2, 0x31),
		N_2 = PLATFORM_VALUE(3, 0x32),
		N_3 = PLATFORM_VALUE(4, 0x33),
		N_4 = PLATFORM_VALUE(5, 0x34),
		N_5 = PLATFORM_VALUE(6, 0x35),
		N_6 = PLATFORM_VALUE(7, 0x36),
		N_7 = PLATFORM_VALUE(8, 0x37),
		N_8 = PLATFORM_VALUE(9, 0x38),
		N_9 = PLATFORM_VALUE(10, 0x39),
		N_0 = PLATFORM_VALUE(11, 0x30),
		MINUS = PLATFORM_VALUE(12, VK_OEM_MINUS),
		EQUAL = PLATFORM_VALUE(13, VK_OEM_PLUS),
		PLUS = PLATFORM_VALUE(13, VK_OEM_PLUS),
		BACKSPACE = PLATFORM_VALUE(14, VK_BACK),
		TAB = PLATFORM_VALUE(15, VK_TAB),
		Q = PLATFORM_VALUE(16, 0x51),
		W = PLATFORM_VALUE(17, 0x57),
		E = PLATFORM_VALUE(18, 0x45),
		R = PLATFORM_VALUE(19, 0x52),
		T = PLATFORM_VALUE(20, 0x54),
		Y = PLATFORM_VALUE(21, 0x59),
		U = PLATFORM_VALUE(22, 0x55),
		I = PLATFORM_VALUE(23, 0x49),
		O = PLATFORM_VALUE(24, 0x4F),
		P = PLATFORM_VALUE(25, 0x50),
		LEFTBRACE = PLATFORM_VALUE(26, VK_OEM_4),
		RIGHTBRACE = PLATFORM_VALUE(27,VK_OEM_6),
		ENTER = PLATFORM_VALUE(28, VK_RETURN),
		LEFTCTRL = PLATFORM_VALUE(29, VK_LCONTROL),
		A = PLATFORM_VALUE(30, 0x41),
		S = PLATFORM_VALUE(31, 0x53),
		D = PLATFORM_VALUE(32, 0x44),
		F = PLATFORM_VALUE(33, 0x46),
		G = PLATFORM_VALUE(34, 0x47),
		H = PLATFORM_VALUE(35, 0x48),
		J = PLATFORM_VALUE(36, 0x4A),
		K = PLATFORM_VALUE(37, 0x4B),
		L = PLATFORM_VALUE(38, 0x4C),
		SEMICOLON = PLATFORM_VALUE(39, VK_OEM_1),
		APOSTROPHE = PLATFORM_VALUE(40, VK_OEM_7),
		GRAVE = PLATFORM_VALUE(41, VK_OEM_3),
		LEFTSHIFT = PLATFORM_VALUE(42, VK_LSHIFT),
		BACKSLASH = PLATFORM_VALUE(43, VK_OEM_5),
		Z = PLATFORM_VALUE(44, 0x5A),
		X = PLATFORM_VALUE(45, 0x58),
		C = PLATFORM_VALUE(46, 0x43),
		V = PLATFORM_VALUE(47, 0x56),
		B = PLATFORM_VALUE(48, 0x42),
		N = PLATFORM_VALUE(49, 0x4E),
		M = PLATFORM_VALUE(50, 	0x4D),
		COMMA = PLATFORM_VALUE(51, VK_OEM_COMMA),
		DOT = PLATFORM_VALUE(52, VK_OEM_PERIOD),
		SLASH = PLATFORM_VALUE(53, VK_OEM_2),
		RIGHTSHIFT = PLATFORM_VALUE(54, VK_RSHIFT),
		KP_ASTERISK = PLATFORM_VALUE(55, VK_MULTIPLY),
		LEFTALT = PLATFORM_VALUE(56, VK_LMENU),
		SPACE = PLATFORM_VALUE(57, VK_SPACE),
		CAPSLOCK = PLATFORM_VALUE(58, VK_CAPITAL),
		F1 = PLATFORM_VALUE(59, VK_F1),
		F2 = PLATFORM_VALUE(60, VK_F2),
		F3 = PLATFORM_VALUE(61, VK_F3),
		F4 = PLATFORM_VALUE(62, VK_F4),
		F5 = PLATFORM_VALUE(63, VK_F5),
		F6 = PLATFORM_VALUE(64, VK_F6),
		F7 = PLATFORM_VALUE(65, VK_F7),
		F8 = PLATFORM_VALUE(66, VK_F8),
		F9 = PLATFORM_VALUE(67, VK_F9),
		F10 = PLATFORM_VALUE(68, VK_F10),
		NUMLOCK = PLATFORM_VALUE(69, VK_NUMLOCK),
		SCROLLLOCK = PLATFORM_VALUE(70, VK_SCROLL),
		KP_7 = PLATFORM_VALUE(71, VK_NUMPAD7),
		KP_8 = PLATFORM_VALUE(72, VK_NUMPAD8),
		KP_9 = PLATFORM_VALUE(73, VK_NUMPAD9),
		KP_MINUS = PLATFORM_VALUE(74, VK_SUBTRACT),
		KP_4 = PLATFORM_VALUE(75, VK_NUMPAD4),
		KP_5 = PLATFORM_VALUE(76, VK_NUMPAD5),
		KP_6 = PLATFORM_VALUE(77, VK_NUMPAD6),
		KP_PLUS = PLATFORM_VALUE(78, VK_ADD),
		KP_1 = PLATFORM_VALUE(79,VK_NUMPAD1),
		KP_2 = PLATFORM_VALUE(80, VK_NUMPAD2),
		KP_3 = PLATFORM_VALUE(81, VK_NUMPAD3),
		KP_0 = PLATFORM_VALUE(82, VK_NUMPAD0),
		KP_DOT = PLATFORM_VALUE(83, VK_DECIMAL),
		// Key available only in EU layout
		_102ND = PLATFORM_VALUE(86, VK_OEM_102),
		F11 = PLATFORM_VALUE(87, VK_F11),
		F12 = PLATFORM_VALUE(88, VK_F12),
		
		// Windows doesn't differentiate between Keypad Enter and Enter through KeyCode alone.
		KP_ENTER = PLATFORM_VALUE(96, VK_RETURN),
		RIGHTCTRL = PLATFORM_VALUE(97, VK_RCONTROL),
		KP_SLASH = PLATFORM_VALUE(98, VK_DIVIDE),
		// print screen
		SYSRQ = PLATFORM_VALUE(99, VK_SNAPSHOT),
		RIGHTALT = PLATFORM_VALUE(100, VK_RMENU),
		HOME = PLATFORM_VALUE(102, VK_HOME),
		UP = PLATFORM_VALUE(103, VK_UP),
		PAGEUP = PLATFORM_VALUE(104, VK_PRIOR),
		LEFT = PLATFORM_VALUE(105, VK_LEFT),
		RIGHT = PLATFORM_VALUE(106, VK_RIGHT),
		END = PLATFORM_VALUE(107, VK_END),
		DOWN = PLATFORM_VALUE(108, VK_DOWN),
		PAGEDOWN = PLATFORM_VALUE(109, VK_NEXT),
		INSERT = PLATFORM_VALUE(110, VK_INSERT),

// a macro DELETE is defined in winnt.h
#define DELETE_MACRO_BACKUP DELETE
#undef DELETE
		DELETE = PLATFORM_VALUE(111, VK_DELETE),
#define DELETE DELETE_MACRO_BACKUP
#undef DELETE_MACRO_BACKUP

		MUTE = PLATFORM_VALUE(113, VK_VOLUME_MUTE),
		VOLUMEDOWN = PLATFORM_VALUE(114, VK_VOLUME_DOWN),
		VOLUMEUP = PLATFORM_VALUE(115, VK_VOLUME_UP),
		// windows doesn't officially support it
		POWER = PLATFORM_VALUE(116, 0xE3),
		//KP_EQUAL = PLATFORM_VALUE(117, ), // no equivalent in windows
		KP_PLUSMINUS = PLATFORM_VALUE(118, VK_SUBTRACT),
		PAUSE = PLATFORM_VALUE(119, VK_PAUSE),

		//KP_COMMA = PLATFORM_VALUE(121, ), // no equivalent in windows

		MENU = PLATFORM_VALUE(139, VK_APPS),
		CALC = PLATFORM_VALUE(140, VK_LAUNCH_APP2),
		SLEEP = PLATFORM_VALUE(142, VK_SLEEP),
		//WAKEUP = PLATFORM_VALUE(143, ), // no equivalent in windows
		NEXTSONG = PLATFORM_VALUE(163, VK_MEDIA_NEXT_TRACK),
		PLAYPAUSE = PLATFORM_VALUE(164, VK_MEDIA_PLAY_PAUSE),
		PREVIOUSSONG = PLATFORM_VALUE(165, VK_MEDIA_PREV_TRACK),
		HOMEPAGE = PLATFORM_VALUE(172, VK_BROWSER_HOME),
		REFRESH = PLATFORM_VALUE(173, VK_BROWSER_REFRESH),
		//EXIT = PLATFORM_VALUE(174, ), // no equivalent in windows
		//SCROLLUP = PLATFORM_VALUE(177, ), // no equivalent in windows
		//SCROLLDOWN = PLATFORM_VALUE(178, ), // no equivalent in windows

	};

}